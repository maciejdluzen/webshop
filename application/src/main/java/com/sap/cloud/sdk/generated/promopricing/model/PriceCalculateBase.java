/*
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 */

/*
 * Calculation
 * You use the Calculation service for SAP Omnichannel Promotion Pricing in your sales channel application to determine the effective sales prices by applying promotional rules in the relevant customer context. The service can be called for a single product or for an entire shopping cart. The calculation is based on the data you uploaded to the cloud environment, and sends back prices and additional information about customer rewards to the calling application.
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sap.cloud.sdk.generated.promopricing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sap.cloud.sdk.generated.promopricing.model.DateTimeCommonData;
import com.sap.cloud.sdk.generated.promopricing.model.IDCommonData;
import com.sap.cloud.sdk.generated.promopricing.model.LoyaltyAccountCommonData;
import com.sap.cloud.sdk.generated.promopricing.model.RoundingRuleType;
import com.sap.cloud.sdk.generated.promopricing.model.ShoppingBasketBase;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import com.google.gson.annotations.SerializedName;

import javax.annotation.Nonnull;

/**
 * Contains relevant information for the price calculation like the items, date and time, and more.
 */
@ApiModel(description = "Contains relevant information for the price calculation like the items, date and time, and more.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

// CHECKSTYLE:OFF
public class PriceCalculateBase 
// CHECKSTYLE:ON
{
  @JsonProperty("TransactionID")
  @SerializedName("TransactionID")
  private IDCommonData transactionID;

  @JsonProperty("DateTime")
  @SerializedName("DateTime")
  private DateTimeCommonData dateTime;

  @JsonProperty("Loyalty")
  @SerializedName("Loyalty")
  private List<LoyaltyAccountCommonData> loyalty = new ArrayList<>();

  @JsonProperty("ShoppingBasket")
  @SerializedName("ShoppingBasket")
  private ShoppingBasketBase shoppingBasket;

  @JsonProperty("RegularSalesUnitPriceRoundingRule")
  @SerializedName("RegularSalesUnitPriceRoundingRule")
  private RoundingRuleType regularSalesUnitPriceRoundingRule;

  @JsonProperty("any")
  @SerializedName("any")
  private List<Object> any = new ArrayList<>();

  /**
   * Indicates whether in this transaction items are sold or returned.
   */
  public enum TransactionTypeEnum {
    /**
    * The SALETRANSACTION option of this PriceCalculateBase
    */
    SALETRANSACTION("SaleTransaction");

    private String value;

    TransactionTypeEnum(String value) {
      this.value = value;
    }

    /**
    * Get the value of the enum
    * @return The enum value
    */
    @JsonValue
    @Nonnull public String getValue() {
      return value;
    }

    /**
    * Get the String value of the enum value.
    * @return The enum value as String
    */
    @Override
    @Nonnull public String toString() {
      return String.valueOf(value);
    }

    /**
    * Get the enum value from a String value
    * @param value The Strin value
    * @return The enum value of type PriceCalculateBase
    */
    @JsonCreator
    @Nonnull public static TransactionTypeEnum fromValue(@Nonnull final String value) {
      for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("TransactionType")
  @SerializedName("TransactionType")
  private TransactionTypeEnum transactionType;

  @JsonProperty("NetPriceFlag")
  @SerializedName("NetPriceFlag")
  private Boolean netPriceFlag;

  /**
   * Controls if the items of the ShoppingBasket element are considered as part of a shared basket (\&quot;Basket\&quot;) or if they are treated as separate items (\&quot;LineItem\&quot;). If not specified, \&quot;Basket\&quot; is used as default. 
   */
  public enum CalculationModeEnum {
    /**
    * The BASKET option of this PriceCalculateBase
    */
    BASKET("Basket"),
    
    /**
    * The LINEITEM option of this PriceCalculateBase
    */
    LINEITEM("LineItem");

    private String value;

    CalculationModeEnum(String value) {
      this.value = value;
    }

    /**
    * Get the value of the enum
    * @return The enum value
    */
    @JsonValue
    @Nonnull public String getValue() {
      return value;
    }

    /**
    * Get the String value of the enum value.
    * @return The enum value as String
    */
    @Override
    @Nonnull public String toString() {
      return String.valueOf(value);
    }

    /**
    * Get the enum value from a String value
    * @param value The Strin value
    * @return The enum value of type PriceCalculateBase
    */
    @JsonCreator
    @Nonnull public static CalculationModeEnum fromValue(@Nonnull final String value) {
      for (CalculationModeEnum b : CalculationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("CalculationMode")
  @SerializedName("CalculationMode")
  private CalculationModeEnum calculationMode;

  /**
   * Controls which price derivation rules are used for the price calculation. This is defined by the transaction control break code/price rule control code and the point in time for the application of price derivation rules (immediately or after subtotal).  For the calculation scheme type &#39;CalcAll&#39;, all transaction control break codes/price rule control codes can be applied (PC, PO, SP, SU). For the calculation scheme type \&quot;CalcForItem\&quot;, only rules with transaction control break code/price rule control code PO and SP can be applied. If not specified, \&quot;CalcAll\&quot; is used as default. The calculation scheme is available as of version 4.0. 
   */
  public enum CalculationSchemeEnum {
    /**
    * The CALCALL option of this PriceCalculateBase
    */
    CALCALL("CalcAll"),
    
    /**
    * The CALCFORITEM option of this PriceCalculateBase
    */
    CALCFORITEM("CalcForItem");

    private String value;

    CalculationSchemeEnum(String value) {
      this.value = value;
    }

    /**
    * Get the value of the enum
    * @return The enum value
    */
    @JsonValue
    @Nonnull public String getValue() {
      return value;
    }

    /**
    * Get the String value of the enum value.
    * @return The enum value as String
    */
    @Override
    @Nonnull public String toString() {
      return String.valueOf(value);
    }

    /**
    * Get the enum value from a String value
    * @param value The Strin value
    * @return The enum value of type PriceCalculateBase
    */
    @JsonCreator
    @Nonnull public static CalculationSchemeEnum fromValue(@Nonnull final String value) {
      for (CalculationSchemeEnum b : CalculationSchemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("CalculationScheme")
  @SerializedName("CalculationScheme")
  private CalculationSchemeEnum calculationScheme;


   /**
   * Set the transactionID of this {@link PriceCalculateBase} instance and return the same instance.
   *
   * @param transactionID  The transactionID of this {@link PriceCalculateBase}
   * @return The same instance of this {@link PriceCalculateBase} class
   */
   @Nonnull public PriceCalculateBase transactionID(@Nonnull final IDCommonData transactionID) {
    this.transactionID = transactionID;
    return this;
  }

   /**
   * Get transactionID
   * @return transactionID  The transactionID of this {@link PriceCalculateBase} instance.
  **/
  @ApiModelProperty(value = "")
  @Nonnull public IDCommonData getTransactionID() {
    return transactionID;
  }

  /**
  * Set the transactionID of this {@link PriceCalculateBase} instance.
  *
  * @param transactionID  The transactionID of this {@link PriceCalculateBase}
  */
  public void setTransactionID( @Nonnull final IDCommonData transactionID) {
    this.transactionID = transactionID;
  }

   /**
   * Set the dateTime of this {@link PriceCalculateBase} instance and return the same instance.
   *
   * @param dateTime  The dateTime of this {@link PriceCalculateBase}
   * @return The same instance of this {@link PriceCalculateBase} class
   */
   @Nonnull public PriceCalculateBase dateTime(@Nonnull final DateTimeCommonData dateTime) {
    this.dateTime = dateTime;
    return this;
  }

   /**
   * Get dateTime
   * @return dateTime  The dateTime of this {@link PriceCalculateBase} instance.
  **/
  @ApiModelProperty(value = "")
  @Nonnull public DateTimeCommonData getDateTime() {
    return dateTime;
  }

  /**
  * Set the dateTime of this {@link PriceCalculateBase} instance.
  *
  * @param dateTime  The dateTime of this {@link PriceCalculateBase}
  */
  public void setDateTime( @Nonnull final DateTimeCommonData dateTime) {
    this.dateTime = dateTime;
  }

   /**
   * Set the loyalty of this {@link PriceCalculateBase} instance and return the same instance.
   *
   * @param loyalty  Refers to the end customer.
   * @return The same instance of this {@link PriceCalculateBase} class
   */
   @Nonnull public PriceCalculateBase loyalty(@Nonnull final List<LoyaltyAccountCommonData> loyalty) {
    this.loyalty = loyalty;
    return this;
  }
  /**
  * Add one Loyalty instance to this {@link PriceCalculateBase}.
  * @param loyaltyItem The Loyalty that should be added
  * @return The same instance of type {@link PriceCalculateBase}
  */
  @Nonnull public PriceCalculateBase addLoyaltyItem( @Nonnull final LoyaltyAccountCommonData loyaltyItem) {
    if (this.loyalty == null) {
      this.loyalty = new ArrayList<>();
    }
    this.loyalty.add(loyaltyItem);
    return this;
  }

   /**
   * Refers to the end customer.
   * @return loyalty  The loyalty of this {@link PriceCalculateBase} instance.
  **/
  @ApiModelProperty(value = "Refers to the end customer.")
  @Nonnull public List<LoyaltyAccountCommonData> getLoyalty() {
    return loyalty;
  }

  /**
  * Set the loyalty of this {@link PriceCalculateBase} instance.
  *
  * @param loyalty  Refers to the end customer.
  */
  public void setLoyalty( @Nonnull final List<LoyaltyAccountCommonData> loyalty) {
    this.loyalty = loyalty;
  }

   /**
   * Set the shoppingBasket of this {@link PriceCalculateBase} instance and return the same instance.
   *
   * @param shoppingBasket  The shoppingBasket of this {@link PriceCalculateBase}
   * @return The same instance of this {@link PriceCalculateBase} class
   */
   @Nonnull public PriceCalculateBase shoppingBasket(@Nonnull final ShoppingBasketBase shoppingBasket) {
    this.shoppingBasket = shoppingBasket;
    return this;
  }

   /**
   * Get shoppingBasket
   * @return shoppingBasket  The shoppingBasket of this {@link PriceCalculateBase} instance.
  **/
  @ApiModelProperty(required = true, value = "")
  @Nonnull public ShoppingBasketBase getShoppingBasket() {
    return shoppingBasket;
  }

  /**
  * Set the shoppingBasket of this {@link PriceCalculateBase} instance.
  *
  * @param shoppingBasket  The shoppingBasket of this {@link PriceCalculateBase}
  */
  public void setShoppingBasket( @Nonnull final ShoppingBasketBase shoppingBasket) {
    this.shoppingBasket = shoppingBasket;
  }

   /**
   * Set the regularSalesUnitPriceRoundingRule of this {@link PriceCalculateBase} instance and return the same instance.
   *
   * @param regularSalesUnitPriceRoundingRule  The regularSalesUnitPriceRoundingRule of this {@link PriceCalculateBase}
   * @return The same instance of this {@link PriceCalculateBase} class
   */
   @Nonnull public PriceCalculateBase regularSalesUnitPriceRoundingRule(@Nonnull final RoundingRuleType regularSalesUnitPriceRoundingRule) {
    this.regularSalesUnitPriceRoundingRule = regularSalesUnitPriceRoundingRule;
    return this;
  }

   /**
   * Get regularSalesUnitPriceRoundingRule
   * @return regularSalesUnitPriceRoundingRule  The regularSalesUnitPriceRoundingRule of this {@link PriceCalculateBase} instance.
  **/
  @ApiModelProperty(value = "")
  @Nonnull public RoundingRuleType getRegularSalesUnitPriceRoundingRule() {
    return regularSalesUnitPriceRoundingRule;
  }

  /**
  * Set the regularSalesUnitPriceRoundingRule of this {@link PriceCalculateBase} instance.
  *
  * @param regularSalesUnitPriceRoundingRule  The regularSalesUnitPriceRoundingRule of this {@link PriceCalculateBase}
  */
  public void setRegularSalesUnitPriceRoundingRule( @Nonnull final RoundingRuleType regularSalesUnitPriceRoundingRule) {
    this.regularSalesUnitPriceRoundingRule = regularSalesUnitPriceRoundingRule;
  }

   /**
   * Set the any of this {@link PriceCalculateBase} instance and return the same instance.
   *
   * @param any  This is currently not supported.
   * @return The same instance of this {@link PriceCalculateBase} class
   */
   @Nonnull public PriceCalculateBase any(@Nonnull final List<Object> any) {
    this.any = any;
    return this;
  }
  /**
  * Add one Any instance to this {@link PriceCalculateBase}.
  * @param anyItem The Any that should be added
  * @return The same instance of type {@link PriceCalculateBase}
  */
  @Nonnull public PriceCalculateBase addAnyItem( @Nonnull final Object anyItem) {
    if (this.any == null) {
      this.any = new ArrayList<>();
    }
    this.any.add(anyItem);
    return this;
  }

   /**
   * This is currently not supported.
   * @return any  The any of this {@link PriceCalculateBase} instance.
  **/
  @ApiModelProperty(value = "This is currently not supported.")
  @Nonnull public List<Object> getAny() {
    return any;
  }

  /**
  * Set the any of this {@link PriceCalculateBase} instance.
  *
  * @param any  This is currently not supported.
  */
  public void setAny( @Nonnull final List<Object> any) {
    this.any = any;
  }

   /**
   * Set the transactionType of this {@link PriceCalculateBase} instance and return the same instance.
   *
   * @param transactionType  Indicates whether in this transaction items are sold or returned.
   * @return The same instance of this {@link PriceCalculateBase} class
   */
   @Nonnull public PriceCalculateBase transactionType(@Nonnull final TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Indicates whether in this transaction items are sold or returned.
   * @return transactionType  The transactionType of this {@link PriceCalculateBase} instance.
  **/
  @ApiModelProperty(value = "Indicates whether in this transaction items are sold or returned.")
  @Nonnull public TransactionTypeEnum getTransactionType() {
    return transactionType;
  }

  /**
  * Set the transactionType of this {@link PriceCalculateBase} instance.
  *
  * @param transactionType  Indicates whether in this transaction items are sold or returned.
  */
  public void setTransactionType( @Nonnull final TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
  }

   /**
   * Set the netPriceFlag of this {@link PriceCalculateBase} instance and return the same instance.
   *
   * @param netPriceFlag  If set to true, the net regular prices are used for the price calculation. Otherwise, the gross prices are considered.
   * @return The same instance of this {@link PriceCalculateBase} class
   */
   @Nonnull public PriceCalculateBase netPriceFlag(@Nonnull final Boolean netPriceFlag) {
    this.netPriceFlag = netPriceFlag;
    return this;
  }

   /**
   * If set to true, the net regular prices are used for the price calculation. Otherwise, the gross prices are considered.
   * @return netPriceFlag  The netPriceFlag of this {@link PriceCalculateBase} instance.
  **/
  @ApiModelProperty(required = true, value = "If set to true, the net regular prices are used for the price calculation. Otherwise, the gross prices are considered.")
  @Nonnull public Boolean isNetPriceFlag() {
    return netPriceFlag;
  }

  /**
  * Set the netPriceFlag of this {@link PriceCalculateBase} instance.
  *
  * @param netPriceFlag  If set to true, the net regular prices are used for the price calculation. Otherwise, the gross prices are considered.
  */
  public void setNetPriceFlag( @Nonnull final Boolean netPriceFlag) {
    this.netPriceFlag = netPriceFlag;
  }

   /**
   * Set the calculationMode of this {@link PriceCalculateBase} instance and return the same instance.
   *
   * @param calculationMode  Controls if the items of the ShoppingBasket element are considered as part of a shared basket (\&quot;Basket\&quot;) or if they are treated as separate items (\&quot;LineItem\&quot;). If not specified, \&quot;Basket\&quot; is used as default. 
   * @return The same instance of this {@link PriceCalculateBase} class
   */
   @Nonnull public PriceCalculateBase calculationMode(@Nonnull final CalculationModeEnum calculationMode) {
    this.calculationMode = calculationMode;
    return this;
  }

   /**
   * Controls if the items of the ShoppingBasket element are considered as part of a shared basket (\&quot;Basket\&quot;) or if they are treated as separate items (\&quot;LineItem\&quot;). If not specified, \&quot;Basket\&quot; is used as default. 
   * @return calculationMode  The calculationMode of this {@link PriceCalculateBase} instance.
  **/
  @ApiModelProperty(example = "Basket", value = "Controls if the items of the ShoppingBasket element are considered as part of a shared basket (\"Basket\") or if they are treated as separate items (\"LineItem\"). If not specified, \"Basket\" is used as default. ")
  @Nonnull public CalculationModeEnum getCalculationMode() {
    return calculationMode;
  }

  /**
  * Set the calculationMode of this {@link PriceCalculateBase} instance.
  *
  * @param calculationMode  Controls if the items of the ShoppingBasket element are considered as part of a shared basket (\&quot;Basket\&quot;) or if they are treated as separate items (\&quot;LineItem\&quot;). If not specified, \&quot;Basket\&quot; is used as default. 
  */
  public void setCalculationMode( @Nonnull final CalculationModeEnum calculationMode) {
    this.calculationMode = calculationMode;
  }

   /**
   * Set the calculationScheme of this {@link PriceCalculateBase} instance and return the same instance.
   *
   * @param calculationScheme  Controls which price derivation rules are used for the price calculation. This is defined by the transaction control break code/price rule control code and the point in time for the application of price derivation rules (immediately or after subtotal).  For the calculation scheme type &#39;CalcAll&#39;, all transaction control break codes/price rule control codes can be applied (PC, PO, SP, SU). For the calculation scheme type \&quot;CalcForItem\&quot;, only rules with transaction control break code/price rule control code PO and SP can be applied. If not specified, \&quot;CalcAll\&quot; is used as default. The calculation scheme is available as of version 4.0. 
   * @return The same instance of this {@link PriceCalculateBase} class
   */
   @Nonnull public PriceCalculateBase calculationScheme(@Nonnull final CalculationSchemeEnum calculationScheme) {
    this.calculationScheme = calculationScheme;
    return this;
  }

   /**
   * Controls which price derivation rules are used for the price calculation. This is defined by the transaction control break code/price rule control code and the point in time for the application of price derivation rules (immediately or after subtotal).  For the calculation scheme type &#39;CalcAll&#39;, all transaction control break codes/price rule control codes can be applied (PC, PO, SP, SU). For the calculation scheme type \&quot;CalcForItem\&quot;, only rules with transaction control break code/price rule control code PO and SP can be applied. If not specified, \&quot;CalcAll\&quot; is used as default. The calculation scheme is available as of version 4.0. 
   * @return calculationScheme  The calculationScheme of this {@link PriceCalculateBase} instance.
  **/
  @ApiModelProperty(example = "CalcAll", value = "Controls which price derivation rules are used for the price calculation. This is defined by the transaction control break code/price rule control code and the point in time for the application of price derivation rules (immediately or after subtotal).  For the calculation scheme type 'CalcAll', all transaction control break codes/price rule control codes can be applied (PC, PO, SP, SU). For the calculation scheme type \"CalcForItem\", only rules with transaction control break code/price rule control code PO and SP can be applied. If not specified, \"CalcAll\" is used as default. The calculation scheme is available as of version 4.0. ")
  @Nonnull public CalculationSchemeEnum getCalculationScheme() {
    return calculationScheme;
  }

  /**
  * Set the calculationScheme of this {@link PriceCalculateBase} instance.
  *
  * @param calculationScheme  Controls which price derivation rules are used for the price calculation. This is defined by the transaction control break code/price rule control code and the point in time for the application of price derivation rules (immediately or after subtotal).  For the calculation scheme type &#39;CalcAll&#39;, all transaction control break codes/price rule control codes can be applied (PC, PO, SP, SU). For the calculation scheme type \&quot;CalcForItem\&quot;, only rules with transaction control break code/price rule control code PO and SP can be applied. If not specified, \&quot;CalcAll\&quot; is used as default. The calculation scheme is available as of version 4.0. 
  */
  public void setCalculationScheme( @Nonnull final CalculationSchemeEnum calculationScheme) {
    this.calculationScheme = calculationScheme;
  }
  @Override
  public boolean equals(@Nonnull final java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    final PriceCalculateBase priceCalculateBase = (PriceCalculateBase) o;
    return Objects.equals(this.transactionID, priceCalculateBase.transactionID) &&
        Objects.equals(this.dateTime, priceCalculateBase.dateTime) &&
        Objects.equals(this.loyalty, priceCalculateBase.loyalty) &&
        Objects.equals(this.shoppingBasket, priceCalculateBase.shoppingBasket) &&
        Objects.equals(this.regularSalesUnitPriceRoundingRule, priceCalculateBase.regularSalesUnitPriceRoundingRule) &&
        Objects.equals(this.any, priceCalculateBase.any) &&
        Objects.equals(this.transactionType, priceCalculateBase.transactionType) &&
        Objects.equals(this.netPriceFlag, priceCalculateBase.netPriceFlag) &&
        Objects.equals(this.calculationMode, priceCalculateBase.calculationMode) &&
        Objects.equals(this.calculationScheme, priceCalculateBase.calculationScheme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionID, dateTime, loyalty, shoppingBasket, regularSalesUnitPriceRoundingRule, any, transactionType, netPriceFlag, calculationMode, calculationScheme);
  }


  @Override
  @Nonnull public String toString() {
    final StringBuilder sb = new StringBuilder();
    sb.append("class PriceCalculateBase {\n");
    sb.append("    transactionID: ").append(toIndentedString(transactionID)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    loyalty: ").append(toIndentedString(loyalty)).append("\n");
    sb.append("    shoppingBasket: ").append(toIndentedString(shoppingBasket)).append("\n");
    sb.append("    regularSalesUnitPriceRoundingRule: ").append(toIndentedString(regularSalesUnitPriceRoundingRule)).append("\n");
    sb.append("    any: ").append(toIndentedString(any)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    netPriceFlag: ").append(toIndentedString(netPriceFlag)).append("\n");
    sb.append("    calculationMode: ").append(toIndentedString(calculationMode)).append("\n");
    sb.append("    calculationScheme: ").append(toIndentedString(calculationScheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(final java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


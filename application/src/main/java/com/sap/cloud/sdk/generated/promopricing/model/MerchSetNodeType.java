/*
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 */

/*
 * Calculation
 * You use the Calculation service for SAP Omnichannel Promotion Pricing in your sales channel application to determine the effective sales prices by applying promotional rules in the relevant customer context. The service can be called for a single product or for an entire shopping cart. The calculation is based on the data you uploaded to the cloud environment, and sends back prices and additional information about customer rewards to the calling application.
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sap.cloud.sdk.generated.promopricing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sap.cloud.sdk.generated.promopricing.model.ItemID;
import com.sap.cloud.sdk.generated.promopricing.model.LineItemAttributeType;
import com.sap.cloud.sdk.generated.promopricing.model.MerchandiseHierarchyCommonData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import com.google.gson.annotations.SerializedName;

import javax.annotation.Nonnull;

/**
 * A structure for modelling a merchandise set node 
 */
@ApiModel(description = "A structure for modelling a merchandise set node ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

// CHECKSTYLE:OFF
public class MerchSetNodeType 
// CHECKSTYLE:ON
{
  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    /**
    * The OPERATION option of this MerchSetNodeType
    */
    OPERATION("Operation"),
    
    /**
    * The ITEM option of this MerchSetNodeType
    */
    ITEM("Item"),
    
    /**
    * The MERCHANDISEHIERARCHYNODE option of this MerchSetNodeType
    */
    MERCHANDISEHIERARCHYNODE("MerchandiseHierarchyNode"),
    
    /**
    * The GENERICATTRIBUTE option of this MerchSetNodeType
    */
    GENERICATTRIBUTE("GenericAttribute");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    /**
    * Get the value of the enum
    * @return The enum value
    */
    @JsonValue
    @Nonnull public String getValue() {
      return value;
    }

    /**
    * Get the String value of the enum value.
    * @return The enum value as String
    */
    @Override
    @Nonnull public String toString() {
      return String.valueOf(value);
    }

    /**
    * Get the enum value from a String value
    * @param value The Strin value
    * @return The enum value of type MerchSetNodeType
    */
    @JsonCreator
    @Nonnull public static TypeEnum fromValue(@Nonnull final String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("Type")
  @SerializedName("Type")
  private TypeEnum type;

  /**
   * Gets or Sets operation
   */
  public enum OperationEnum {
    /**
    * The DIFFERENCE option of this MerchSetNodeType
    */
    DIFFERENCE("Difference");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    /**
    * Get the value of the enum
    * @return The enum value
    */
    @JsonValue
    @Nonnull public String getValue() {
      return value;
    }

    /**
    * Get the String value of the enum value.
    * @return The enum value as String
    */
    @Override
    @Nonnull public String toString() {
      return String.valueOf(value);
    }

    /**
    * Get the enum value from a String value
    * @param value The Strin value
    * @return The enum value of type MerchSetNodeType
    */
    @JsonCreator
    @Nonnull public static OperationEnum fromValue(@Nonnull final String value) {
      for (OperationEnum b : OperationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("Operation")
  @SerializedName("Operation")
  private OperationEnum operation;

  @JsonProperty("ItemID")
  @SerializedName("ItemID")
  private ItemID itemID;

  @JsonProperty("MerchandiseHierarchy")
  @SerializedName("MerchandiseHierarchy")
  private MerchandiseHierarchyCommonData merchandiseHierarchy;

  @JsonProperty("GenericAttribute")
  @SerializedName("GenericAttribute")
  private LineItemAttributeType genericAttribute;

  @JsonProperty("Include")
  @SerializedName("Include")
  private List<MerchSetNodeType> include = new ArrayList<>();

  @JsonProperty("Exclude")
  @SerializedName("Exclude")
  private List<MerchSetNodeType> exclude = new ArrayList<>();

  @JsonProperty("Filter")
  @SerializedName("Filter")
  private List<MerchSetNodeType> filter = new ArrayList<>();


   /**
   * Set the type of this {@link MerchSetNodeType} instance and return the same instance.
   *
   * @param type  The type of this {@link MerchSetNodeType}
   * @return The same instance of this {@link MerchSetNodeType} class
   */
   @Nonnull public MerchSetNodeType type(@Nonnull final TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type  The type of this {@link MerchSetNodeType} instance.
  **/
  @ApiModelProperty(value = "")
  @Nonnull public TypeEnum getType() {
    return type;
  }

  /**
  * Set the type of this {@link MerchSetNodeType} instance.
  *
  * @param type  The type of this {@link MerchSetNodeType}
  */
  public void setType( @Nonnull final TypeEnum type) {
    this.type = type;
  }

   /**
   * Set the operation of this {@link MerchSetNodeType} instance and return the same instance.
   *
   * @param operation  The operation of this {@link MerchSetNodeType}
   * @return The same instance of this {@link MerchSetNodeType} class
   */
   @Nonnull public MerchSetNodeType operation(@Nonnull final OperationEnum operation) {
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation  The operation of this {@link MerchSetNodeType} instance.
  **/
  @ApiModelProperty(value = "")
  @Nonnull public OperationEnum getOperation() {
    return operation;
  }

  /**
  * Set the operation of this {@link MerchSetNodeType} instance.
  *
  * @param operation  The operation of this {@link MerchSetNodeType}
  */
  public void setOperation( @Nonnull final OperationEnum operation) {
    this.operation = operation;
  }

   /**
   * Set the itemID of this {@link MerchSetNodeType} instance and return the same instance.
   *
   * @param itemID  The itemID of this {@link MerchSetNodeType}
   * @return The same instance of this {@link MerchSetNodeType} class
   */
   @Nonnull public MerchSetNodeType itemID(@Nonnull final ItemID itemID) {
    this.itemID = itemID;
    return this;
  }

   /**
   * Get itemID
   * @return itemID  The itemID of this {@link MerchSetNodeType} instance.
  **/
  @ApiModelProperty(value = "")
  @Nonnull public ItemID getItemID() {
    return itemID;
  }

  /**
  * Set the itemID of this {@link MerchSetNodeType} instance.
  *
  * @param itemID  The itemID of this {@link MerchSetNodeType}
  */
  public void setItemID( @Nonnull final ItemID itemID) {
    this.itemID = itemID;
  }

   /**
   * Set the merchandiseHierarchy of this {@link MerchSetNodeType} instance and return the same instance.
   *
   * @param merchandiseHierarchy  The merchandiseHierarchy of this {@link MerchSetNodeType}
   * @return The same instance of this {@link MerchSetNodeType} class
   */
   @Nonnull public MerchSetNodeType merchandiseHierarchy(@Nonnull final MerchandiseHierarchyCommonData merchandiseHierarchy) {
    this.merchandiseHierarchy = merchandiseHierarchy;
    return this;
  }

   /**
   * Get merchandiseHierarchy
   * @return merchandiseHierarchy  The merchandiseHierarchy of this {@link MerchSetNodeType} instance.
  **/
  @ApiModelProperty(value = "")
  @Nonnull public MerchandiseHierarchyCommonData getMerchandiseHierarchy() {
    return merchandiseHierarchy;
  }

  /**
  * Set the merchandiseHierarchy of this {@link MerchSetNodeType} instance.
  *
  * @param merchandiseHierarchy  The merchandiseHierarchy of this {@link MerchSetNodeType}
  */
  public void setMerchandiseHierarchy( @Nonnull final MerchandiseHierarchyCommonData merchandiseHierarchy) {
    this.merchandiseHierarchy = merchandiseHierarchy;
  }

   /**
   * Set the genericAttribute of this {@link MerchSetNodeType} instance and return the same instance.
   *
   * @param genericAttribute  The genericAttribute of this {@link MerchSetNodeType}
   * @return The same instance of this {@link MerchSetNodeType} class
   */
   @Nonnull public MerchSetNodeType genericAttribute(@Nonnull final LineItemAttributeType genericAttribute) {
    this.genericAttribute = genericAttribute;
    return this;
  }

   /**
   * Get genericAttribute
   * @return genericAttribute  The genericAttribute of this {@link MerchSetNodeType} instance.
  **/
  @ApiModelProperty(value = "")
  @Nonnull public LineItemAttributeType getGenericAttribute() {
    return genericAttribute;
  }

  /**
  * Set the genericAttribute of this {@link MerchSetNodeType} instance.
  *
  * @param genericAttribute  The genericAttribute of this {@link MerchSetNodeType}
  */
  public void setGenericAttribute( @Nonnull final LineItemAttributeType genericAttribute) {
    this.genericAttribute = genericAttribute;
  }

   /**
   * Set the include of this {@link MerchSetNodeType} instance and return the same instance.
   *
   * @param include  The include of this {@link MerchSetNodeType}
   * @return The same instance of this {@link MerchSetNodeType} class
   */
   @Nonnull public MerchSetNodeType include(@Nonnull final List<MerchSetNodeType> include) {
    this.include = include;
    return this;
  }
  /**
  * Add one Include instance to this {@link MerchSetNodeType}.
  * @param includeItem The Include that should be added
  * @return The same instance of type {@link MerchSetNodeType}
  */
  @Nonnull public MerchSetNodeType addIncludeItem( @Nonnull final MerchSetNodeType includeItem) {
    if (this.include == null) {
      this.include = new ArrayList<>();
    }
    this.include.add(includeItem);
    return this;
  }

   /**
   * Get include
   * @return include  The include of this {@link MerchSetNodeType} instance.
  **/
  @ApiModelProperty(value = "")
  @Nonnull public List<MerchSetNodeType> getInclude() {
    return include;
  }

  /**
  * Set the include of this {@link MerchSetNodeType} instance.
  *
  * @param include  The include of this {@link MerchSetNodeType}
  */
  public void setInclude( @Nonnull final List<MerchSetNodeType> include) {
    this.include = include;
  }

   /**
   * Set the exclude of this {@link MerchSetNodeType} instance and return the same instance.
   *
   * @param exclude  The exclude of this {@link MerchSetNodeType}
   * @return The same instance of this {@link MerchSetNodeType} class
   */
   @Nonnull public MerchSetNodeType exclude(@Nonnull final List<MerchSetNodeType> exclude) {
    this.exclude = exclude;
    return this;
  }
  /**
  * Add one Exclude instance to this {@link MerchSetNodeType}.
  * @param excludeItem The Exclude that should be added
  * @return The same instance of type {@link MerchSetNodeType}
  */
  @Nonnull public MerchSetNodeType addExcludeItem( @Nonnull final MerchSetNodeType excludeItem) {
    if (this.exclude == null) {
      this.exclude = new ArrayList<>();
    }
    this.exclude.add(excludeItem);
    return this;
  }

   /**
   * Get exclude
   * @return exclude  The exclude of this {@link MerchSetNodeType} instance.
  **/
  @ApiModelProperty(value = "")
  @Nonnull public List<MerchSetNodeType> getExclude() {
    return exclude;
  }

  /**
  * Set the exclude of this {@link MerchSetNodeType} instance.
  *
  * @param exclude  The exclude of this {@link MerchSetNodeType}
  */
  public void setExclude( @Nonnull final List<MerchSetNodeType> exclude) {
    this.exclude = exclude;
  }

   /**
   * Set the filter of this {@link MerchSetNodeType} instance and return the same instance.
   *
   * @param filter  The filter of this {@link MerchSetNodeType}
   * @return The same instance of this {@link MerchSetNodeType} class
   */
   @Nonnull public MerchSetNodeType filter(@Nonnull final List<MerchSetNodeType> filter) {
    this.filter = filter;
    return this;
  }
  /**
  * Add one Filter instance to this {@link MerchSetNodeType}.
  * @param filterItem The Filter that should be added
  * @return The same instance of type {@link MerchSetNodeType}
  */
  @Nonnull public MerchSetNodeType addFilterItem( @Nonnull final MerchSetNodeType filterItem) {
    if (this.filter == null) {
      this.filter = new ArrayList<>();
    }
    this.filter.add(filterItem);
    return this;
  }

   /**
   * Get filter
   * @return filter  The filter of this {@link MerchSetNodeType} instance.
  **/
  @ApiModelProperty(value = "")
  @Nonnull public List<MerchSetNodeType> getFilter() {
    return filter;
  }

  /**
  * Set the filter of this {@link MerchSetNodeType} instance.
  *
  * @param filter  The filter of this {@link MerchSetNodeType}
  */
  public void setFilter( @Nonnull final List<MerchSetNodeType> filter) {
    this.filter = filter;
  }
  @Override
  public boolean equals(@Nonnull final java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    final MerchSetNodeType merchSetNodeType = (MerchSetNodeType) o;
    return Objects.equals(this.type, merchSetNodeType.type) &&
        Objects.equals(this.operation, merchSetNodeType.operation) &&
        Objects.equals(this.itemID, merchSetNodeType.itemID) &&
        Objects.equals(this.merchandiseHierarchy, merchSetNodeType.merchandiseHierarchy) &&
        Objects.equals(this.genericAttribute, merchSetNodeType.genericAttribute) &&
        Objects.equals(this.include, merchSetNodeType.include) &&
        Objects.equals(this.exclude, merchSetNodeType.exclude) &&
        Objects.equals(this.filter, merchSetNodeType.filter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, operation, itemID, merchandiseHierarchy, genericAttribute, include, exclude, filter);
  }


  @Override
  @Nonnull public String toString() {
    final StringBuilder sb = new StringBuilder();
    sb.append("class MerchSetNodeType {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    itemID: ").append(toIndentedString(itemID)).append("\n");
    sb.append("    merchandiseHierarchy: ").append(toIndentedString(merchandiseHierarchy)).append("\n");
    sb.append("    genericAttribute: ").append(toIndentedString(genericAttribute)).append("\n");
    sb.append("    include: ").append(toIndentedString(include)).append("\n");
    sb.append("    exclude: ").append(toIndentedString(exclude)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(final java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

